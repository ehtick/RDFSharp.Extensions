/* This is the official test suite of RDFOracleStore. It uses the default database on local Oracle XE instance with SYSTEM:SYSTEMPWD */

using RDFSharp.Extensions.Oracle;
using RDFSharp.Model;
using RDFSharp.Store;
using Xunit;

//Setup
RDFOracleStore oracleStore = new RDFOracleStore("Data Source=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=XE)));User Id=SYSTEM;Password=SYSTEMPWD;");
Assert.NotNull(oracleStore);
Assert.Equal("ORACLE", oracleStore.StoreType);

//Clear
if (new Random().NextDouble() >= 0.50)
    await oracleStore.ClearQuadruplesAsync();
else
    oracleStore.ClearQuadruples();

Assert.Equal(0, oracleStore.QuadruplesCount);
Assert.Equal(0, await oracleStore.QuadruplesCountAsync);

//Load
for (int i = 1; i <= 250; i++)
{
    oracleStore.AddQuadruple(new RDFQuadruple(
            new RDFContext(new Uri($"ex:ctx{i}")),
            new RDFResource($"ex:subj{i}"),
            new RDFResource($"ex:pred{i}"),
            new RDFResource($"ex:obj{i}")));
    await oracleStore.AddQuadrupleAsync(new RDFQuadruple(
        new RDFContext(new Uri($"ex:ctx{i}")),
        new RDFResource($"ex:subj{i}"),
        new RDFResource($"ex:pred{i}"),
        new RDFPlainLiteral($"{i}")));
}
Assert.Equal(500, oracleStore.QuadruplesCount);
Assert.Equal(500, await oracleStore.QuadruplesCountAsync);
oracleStore.AddQuadruple(new RDFQuadruple(
    new RDFContext(new Uri("ex:ctx200")),
    new RDFResource("ex:subj200"),
    new RDFResource("ex:pred200"),
    new RDFResource("ex:obj200"))); //Already existing
Assert.Equal(500, oracleStore.QuadruplesCount);
Assert.Equal(500, await oracleStore.QuadruplesCountAsync);
RDFGraph graph1 = new RDFGraph([
    new RDFTriple(new RDFResource("ex:subj251"), new RDFResource("ex:pred251"), new RDFPlainLiteral("251")),
    new RDFTriple(new RDFResource("ex:subj251"), new RDFResource("ex:pred251"), new RDFResource("ex:obj251"))]);
oracleStore.MergeGraph(graph1);
Assert.Equal(502, oracleStore.QuadruplesCount);
Assert.Equal(502, await oracleStore.QuadruplesCountAsync);
RDFGraph graph2 = new RDFGraph([
    new RDFTriple(new RDFResource("ex:subj252"), new RDFResource("ex:pred252"), new RDFPlainLiteral("252")),
    new RDFTriple(new RDFResource("ex:subj252"), new RDFResource("ex:pred252"), new RDFResource("ex:obj252"))]);
await oracleStore.MergeGraphAsync(graph2);
Assert.Equal(504, oracleStore.QuadruplesCount);
Assert.Equal(504, await oracleStore.QuadruplesCountAsync);

//Remove
oracleStore.RemoveQuadruple(new RDFQuadruple(
    new RDFContext(),
    new RDFResource("ex:subj252"),
    new RDFResource("ex:pred252"),
    new RDFResource("ex:obj252")));
Assert.Equal(503, oracleStore.QuadruplesCount);
Assert.Equal(503, await oracleStore.QuadruplesCountAsync);
oracleStore.RemoveQuadruple(new RDFQuadruple(
    new RDFContext(),
    new RDFResource("ex:subj254"),
    new RDFResource("ex:pred254"),
    new RDFResource("ex:obj254"))); //unexisting
Assert.Equal(503, oracleStore.QuadruplesCount);
Assert.Equal(503, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(c:new RDFContext());
Assert.Equal(500, oracleStore.QuadruplesCount);
Assert.Equal(500, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(s:new RDFResource("ex:subj250"));
Assert.Equal(498, oracleStore.QuadruplesCount);
Assert.Equal(498, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(p:new RDFResource("ex:pred249"));
Assert.Equal(496, oracleStore.QuadruplesCount);
Assert.Equal(496, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(o:new RDFResource("ex:obj248"));
Assert.Equal(495, oracleStore.QuadruplesCount);
Assert.Equal(495, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(l:new RDFPlainLiteral("247"));
Assert.Equal(494, oracleStore.QuadruplesCount);
Assert.Equal(494, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(c:new RDFContext(new Uri("ex:ctx246")),s:new RDFResource("ex:subj246"));
Assert.Equal(492, oracleStore.QuadruplesCount);
Assert.Equal(492, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(c:new RDFContext(new Uri("ex:ctx245")),p:new RDFResource("ex:pred245"));
Assert.Equal(490, oracleStore.QuadruplesCount);
Assert.Equal(490, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(c:new RDFContext(new Uri("ex:ctx244")),o:new RDFResource("ex:obj244"));
Assert.Equal(489, oracleStore.QuadruplesCount);
Assert.Equal(489, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(c:new RDFContext(new Uri("ex:ctx243")),l:new RDFPlainLiteral("243"));
Assert.Equal(488, oracleStore.QuadruplesCount);
Assert.Equal(488, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(c:new RDFContext(new Uri("ex:ctx242")),s:new RDFResource("ex:subj242"),p:new RDFResource("ex:pred242"));
Assert.Equal(486, oracleStore.QuadruplesCount);
Assert.Equal(486, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(c:new RDFContext(new Uri("ex:ctx241")),s:new RDFResource("ex:subj241"),o:new RDFResource("ex:obj241"));
Assert.Equal(485, oracleStore.QuadruplesCount);
Assert.Equal(485, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(c:new RDFContext(new Uri("ex:ctx240")),s:new RDFResource("ex:subj240"),l:new RDFPlainLiteral("240"));
Assert.Equal(484, oracleStore.QuadruplesCount);
Assert.Equal(484, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(c:new RDFContext(new Uri("ex:ctx239")),s:new RDFResource("ex:subj239"),p:new RDFResource("ex:pred239"),o:new RDFResource("ex:obj239"));
Assert.Equal(483, oracleStore.QuadruplesCount);
Assert.Equal(483, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(c:new RDFContext(new Uri("ex:ctx238")),s:new RDFResource("ex:subj238"),p:new RDFResource("ex:pred238"),l:new RDFPlainLiteral("238"));
Assert.Equal(482, oracleStore.QuadruplesCount);
Assert.Equal(482, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(s:new RDFResource("ex:subj237"),p:new RDFResource("ex:pred237"));
Assert.Equal(480, oracleStore.QuadruplesCount);
Assert.Equal(480, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(s:new RDFResource("ex:subj236"),o:new RDFResource("ex:obj236"));
Assert.Equal(479, oracleStore.QuadruplesCount);
Assert.Equal(479, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(s:new RDFResource("ex:subj235"),l:new RDFPlainLiteral("235"));
Assert.Equal(478, oracleStore.QuadruplesCount);
Assert.Equal(478, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(s:new RDFResource("ex:subj234"),p:new RDFResource("ex:pred234"),o:new RDFResource("ex:obj234"));
Assert.Equal(477, oracleStore.QuadruplesCount);
Assert.Equal(477, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(s:new RDFResource("ex:subj233"),p:new RDFResource("ex:pred233"),l:new RDFPlainLiteral("233"));
Assert.Equal(476, oracleStore.QuadruplesCount);
Assert.Equal(476, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(p:new RDFResource("ex:pred232"),o:new RDFResource("ex:obj232"));
Assert.Equal(475, oracleStore.QuadruplesCount);
Assert.Equal(475, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(p:new RDFResource("ex:pred231"),l:new RDFPlainLiteral("231"));
Assert.Equal(474, oracleStore.QuadruplesCount);
Assert.Equal(474, await oracleStore.QuadruplesCountAsync);
await oracleStore.RemoveQuadruplesAsync(p:new RDFResource("ex:pred231"),l:new RDFPlainLiteral("231")); //no more existing
Assert.Equal(474, oracleStore.QuadruplesCount);
Assert.Equal(474, await oracleStore.QuadruplesCountAsync);

//Query
Assert.True(oracleStore.ContainsQuadruple(new RDFQuadruple(
    new RDFContext(new Uri("ex:ctx200")),
    new RDFResource("ex:subj200"),
    new RDFResource("ex:pred200"),
    new RDFResource("ex:obj200"))));
Assert.True(await oracleStore.ContainsQuadrupleAsync(new RDFQuadruple(
    new RDFContext(new Uri("ex:ctx200")),
    new RDFResource("ex:subj200"),
    new RDFResource("ex:pred200"),
    new RDFResource("ex:obj200"))));
Assert.False(oracleStore.ContainsQuadruple(new RDFQuadruple(
    new RDFContext(new Uri("ex:ctx2007787")),
    new RDFResource("ex:subj200"),
    new RDFResource("ex:pred200"),
    new RDFResource("ex:obj200"))));
Assert.False(await oracleStore.ContainsQuadrupleAsync(new RDFQuadruple(
    new RDFContext(new Uri("ex:ctx2007787")),
    new RDFResource("ex:subj200"),
    new RDFResource("ex:pred200"),
    new RDFResource("ex:obj200"))));
Assert.Equal(2, oracleStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200"))).Count);
Assert.Equal(2, oracleStore.SelectQuadruples(s: new RDFResource("ex:subj200")).Count);
Assert.Equal(2, oracleStore.SelectQuadruples(p: new RDFResource("ex:pred200")).Count);
Assert.Equal(1, oracleStore.SelectQuadruples(o: new RDFResource("ex:obj200")).Count);
Assert.Equal(1, oracleStore.SelectQuadruples(l: new RDFPlainLiteral("200")).Count);
Assert.Equal(2, oracleStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200")), s: new RDFResource("ex:subj200")).Count);
Assert.Equal(2, oracleStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200")), p: new RDFResource("ex:pred200")).Count);
Assert.Equal(1, oracleStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200")), o: new RDFResource("ex:obj200")).Count);
Assert.Equal(1, oracleStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200")), l: new RDFPlainLiteral("200")).Count);
Assert.Equal(2, oracleStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200")), s: new RDFResource("ex:subj200"), p: new RDFResource("ex:pred200")).Count);
Assert.Equal(1, oracleStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200")), s: new RDFResource("ex:subj200"), o: new RDFResource("ex:obj200")).Count);
Assert.Equal(1, oracleStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200")), s: new RDFResource("ex:subj200"), l: new RDFPlainLiteral("200")).Count);
Assert.Equal(1, oracleStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200")), s: new RDFResource("ex:subj200"), p: new RDFResource("ex:pred200"), o: new RDFResource("ex:obj200")).Count);
Assert.Equal(1, oracleStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200")), s: new RDFResource("ex:subj200"), p: new RDFResource("ex:pred200"), l: new RDFPlainLiteral("200")).Count);
Assert.Equal(2, oracleStore.SelectQuadruples(s: new RDFResource("ex:subj200"), p: new RDFResource("ex:pred200")).Count);
Assert.Equal(1, oracleStore.SelectQuadruples(s: new RDFResource("ex:subj200"), o: new RDFResource("ex:obj200")).Count);
Assert.Equal(1, oracleStore.SelectQuadruples(s: new RDFResource("ex:subj200"), l: new RDFPlainLiteral("200")).Count);
Assert.Equal(1, oracleStore.SelectQuadruples(s: new RDFResource("ex:subj200"), p: new RDFResource("ex:pred200"), o: new RDFResource("ex:obj200")).Count);
Assert.Equal(1, oracleStore.SelectQuadruples(s: new RDFResource("ex:subj200"), p: new RDFResource("ex:pred200"), l: new RDFPlainLiteral("200")).Count);
Assert.Equal(1, oracleStore.SelectQuadruples(p: new RDFResource("ex:pred200"), o: new RDFResource("ex:obj200")).Count);
Assert.Equal(1, oracleStore.SelectQuadruples(p: new RDFResource("ex:pred200"), l: new RDFPlainLiteral("200")).Count);
Assert.Equal(0, oracleStore.SelectQuadruples(p: new RDFResource("ex:pred200786537"), l: new RDFPlainLiteral("200")).Count); //unexisting

//Optimize
oracleStore.Optimize();

//Query (Full Selectors + Accessors)
Assert.True(oracleStore.SelectQuadruples().Count > 100);
Assert.Equal(1, oracleStore[p: new RDFResource("ex:pred200"), l: new RDFPlainLiteral("200")].QuadruplesCount);
Assert.True(oracleStore[null, null, null, null, null].QuadruplesCount > 100);
await oracleStore.RemoveQuadruplesAsync();
Assert.Equal(0, oracleStore.QuadruplesCount);
Assert.Equal(0, await oracleStore.QuadruplesCountAsync);
Assert.True(oracleStore.SelectQuadruples().Count == 0);
Assert.True(oracleStore[null, null, null, null, null].QuadruplesCount == 0);