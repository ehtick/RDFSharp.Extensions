/* This is the official test suite of RDFSQLiteStore. */

using RDFSharp.Extensions.Firebird;
using RDFSharp.Model;
using RDFSharp.Store;
using Xunit;

//Setup
RDFSQLiteStore sqliteStore = new RDFQLiteStore("Data Source=Example.db");
Assert.NotNull(sqliteStore);
Assert.Equal("SQLITE", sqliteStore.StoreType);

//Clear
if (new Random().NextDouble() >= 0.50)
    await sqliteStore.ClearQuadruplesAsync();
else
    sqliteStore.ClearQuadruples();

Assert.Equal(0, sqliteStore.QuadruplesCount);
Assert.Equal(0, await sqliteStore.QuadruplesCountAsync);

//Load
for (int i = 1; i <= 250; i++)
{
    sqliteStore.AddQuadruple(new RDFQuadruple(
            new RDFContext(new Uri($"ex:ctx{i}")),
            new RDFResource($"ex:subj{i}"),
            new RDFResource($"ex:pred{i}"),
            new RDFResource($"ex:obj{i}")));
    await sqliteStore.AddQuadrupleAsync(new RDFQuadruple(
        new RDFContext(new Uri($"ex:ctx{i}")),
        new RDFResource($"ex:subj{i}"),
        new RDFResource($"ex:pred{i}"),
        new RDFPlainLiteral($"{i}")));
}
Assert.Equal(500, sqliteStore.QuadruplesCount);
Assert.Equal(500, await sqliteStore.QuadruplesCountAsync);
sqliteStore.AddQuadruple(new RDFQuadruple(
    new RDFContext(new Uri("ex:ctx200")),
    new RDFResource("ex:subj200"),
    new RDFResource("ex:pred200"),
    new RDFResource("ex:obj200"))); //Already existing
Assert.Equal(500, sqliteStore.QuadruplesCount);
Assert.Equal(500, await sqliteStore.QuadruplesCountAsync);
RDFGraph graph1 = new RDFGraph([
    new RDFTriple(new RDFResource("ex:subj251"), new RDFResource("ex:pred251"), new RDFPlainLiteral("251")),
    new RDFTriple(new RDFResource("ex:subj251"), new RDFResource("ex:pred251"), new RDFResource("ex:obj251"))]);
sqliteStore.MergeGraph(graph1);
Assert.Equal(502, sqliteStore.QuadruplesCount);
Assert.Equal(502, await sqliteStore.QuadruplesCountAsync);
RDFGraph graph2 = new RDFGraph([
    new RDFTriple(new RDFResource("ex:subj252"), new RDFResource("ex:pred252"), new RDFPlainLiteral("252")),
    new RDFTriple(new RDFResource("ex:subj252"), new RDFResource("ex:pred252"), new RDFResource("ex:obj252"))]);
await sqliteStore.MergeGraphAsync(graph2);
Assert.Equal(504, sqliteStore.QuadruplesCount);
Assert.Equal(504, await sqliteStore.QuadruplesCountAsync);

//Remove
sqliteStore.RemoveQuadruple(new RDFQuadruple(
    new RDFContext(),
    new RDFResource("ex:subj252"),
    new RDFResource("ex:pred252"),
    new RDFResource("ex:obj252")));
Assert.Equal(503, sqliteStore.QuadruplesCount);
Assert.Equal(503, await sqliteStore.QuadruplesCountAsync);
sqliteStore.RemoveQuadruple(new RDFQuadruple(
    new RDFContext(),
    new RDFResource("ex:subj254"),
    new RDFResource("ex:pred254"),
    new RDFResource("ex:obj254"))); //unexisting
Assert.Equal(503, sqliteStore.QuadruplesCount);
Assert.Equal(503, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(c:new RDFContext());
Assert.Equal(500, sqliteStore.QuadruplesCount);
Assert.Equal(500, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(s:new RDFResource("ex:subj250"));
Assert.Equal(498, sqliteStore.QuadruplesCount);
Assert.Equal(498, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(p:new RDFResource("ex:pred249"));
Assert.Equal(496, sqliteStore.QuadruplesCount);
Assert.Equal(496, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(o:new RDFResource("ex:obj248"));
Assert.Equal(495, sqliteStore.QuadruplesCount);
Assert.Equal(495, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(l:new RDFPlainLiteral("247"));
Assert.Equal(494, sqliteStore.QuadruplesCount);
Assert.Equal(494, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(c:new RDFContext(new Uri("ex:ctx246")),s:new RDFResource("ex:subj246"));
Assert.Equal(492, sqliteStore.QuadruplesCount);
Assert.Equal(492, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(c:new RDFContext(new Uri("ex:ctx245")),p:new RDFResource("ex:pred245"));
Assert.Equal(490, sqliteStore.QuadruplesCount);
Assert.Equal(490, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(c:new RDFContext(new Uri("ex:ctx244")),o:new RDFResource("ex:obj244"));
Assert.Equal(489, sqliteStore.QuadruplesCount);
Assert.Equal(489, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(c:new RDFContext(new Uri("ex:ctx243")),l:new RDFPlainLiteral("243"));
Assert.Equal(488, sqliteStore.QuadruplesCount);
Assert.Equal(488, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(c:new RDFContext(new Uri("ex:ctx242")),s:new RDFResource("ex:subj242"),p:new RDFResource("ex:pred242"));
Assert.Equal(486, sqliteStore.QuadruplesCount);
Assert.Equal(486, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(c:new RDFContext(new Uri("ex:ctx241")),s:new RDFResource("ex:subj241"),o:new RDFResource("ex:obj241"));
Assert.Equal(485, sqliteStore.QuadruplesCount);
Assert.Equal(485, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(c:new RDFContext(new Uri("ex:ctx240")),s:new RDFResource("ex:subj240"),l:new RDFPlainLiteral("240"));
Assert.Equal(484, sqliteStore.QuadruplesCount);
Assert.Equal(484, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(c:new RDFContext(new Uri("ex:ctx239")),s:new RDFResource("ex:subj239"),p:new RDFResource("ex:pred239"),o:new RDFResource("ex:obj239"));
Assert.Equal(483, sqliteStore.QuadruplesCount);
Assert.Equal(483, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(c:new RDFContext(new Uri("ex:ctx238")),s:new RDFResource("ex:subj238"),p:new RDFResource("ex:pred238"),l:new RDFPlainLiteral("238"));
Assert.Equal(482, sqliteStore.QuadruplesCount);
Assert.Equal(482, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(s:new RDFResource("ex:subj237"),p:new RDFResource("ex:pred237"));
Assert.Equal(480, sqliteStore.QuadruplesCount);
Assert.Equal(480, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(s:new RDFResource("ex:subj236"),o:new RDFResource("ex:obj236"));
Assert.Equal(479, sqliteStore.QuadruplesCount);
Assert.Equal(479, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(s:new RDFResource("ex:subj235"),l:new RDFPlainLiteral("235"));
Assert.Equal(478, sqliteStore.QuadruplesCount);
Assert.Equal(478, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(s:new RDFResource("ex:subj234"),p:new RDFResource("ex:pred234"),o:new RDFResource("ex:obj234"));
Assert.Equal(477, sqliteStore.QuadruplesCount);
Assert.Equal(477, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(s:new RDFResource("ex:subj233"),p:new RDFResource("ex:pred233"),l:new RDFPlainLiteral("233"));
Assert.Equal(476, sqliteStore.QuadruplesCount);
Assert.Equal(476, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(p:new RDFResource("ex:pred232"),o:new RDFResource("ex:obj232"));
Assert.Equal(475, sqliteStore.QuadruplesCount);
Assert.Equal(475, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(p:new RDFResource("ex:pred231"),l:new RDFPlainLiteral("231"));
Assert.Equal(474, sqliteStore.QuadruplesCount);
Assert.Equal(474, await sqliteStore.QuadruplesCountAsync);
await sqliteStore.RemoveQuadruplesAsync(p:new RDFResource("ex:pred231"),l:new RDFPlainLiteral("231")); //no more existing
Assert.Equal(474, sqliteStore.QuadruplesCount);
Assert.Equal(474, await sqliteStore.QuadruplesCountAsync);

//Query
Assert.True(sqliteStore.ContainsQuadruple(new RDFQuadruple(
    new RDFContext(new Uri("ex:ctx200")),
    new RDFResource("ex:subj200"),
    new RDFResource("ex:pred200"),
    new RDFResource("ex:obj200"))));
Assert.True(await sqliteStore.ContainsQuadrupleAsync(new RDFQuadruple(
    new RDFContext(new Uri("ex:ctx200")),
    new RDFResource("ex:subj200"),
    new RDFResource("ex:pred200"),
    new RDFResource("ex:obj200"))));
Assert.False(sqliteStore.ContainsQuadruple(new RDFQuadruple(
    new RDFContext(new Uri("ex:ctx2007787")),
    new RDFResource("ex:subj200"),
    new RDFResource("ex:pred200"),
    new RDFResource("ex:obj200"))));
Assert.False(await sqliteStore.ContainsQuadrupleAsync(new RDFQuadruple(
    new RDFContext(new Uri("ex:ctx2007787")),
    new RDFResource("ex:subj200"),
    new RDFResource("ex:pred200"),
    new RDFResource("ex:obj200"))));
Assert.Equal(2, sqliteStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200"))).Count);
Assert.Equal(2, sqliteStore.SelectQuadruples(s: new RDFResource("ex:subj200")).Count);
Assert.Equal(2, sqliteStore.SelectQuadruples(p: new RDFResource("ex:pred200")).Count);
Assert.Equal(1, sqliteStore.SelectQuadruples(o: new RDFResource("ex:obj200")).Count);
Assert.Equal(1, sqliteStore.SelectQuadruples(l: new RDFPlainLiteral("200")).Count);
Assert.Equal(2, sqliteStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200")), s: new RDFResource("ex:subj200")).Count);
Assert.Equal(2, sqliteStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200")), p: new RDFResource("ex:pred200")).Count);
Assert.Equal(1, sqliteStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200")), o: new RDFResource("ex:obj200")).Count);
Assert.Equal(1, sqliteStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200")), l: new RDFPlainLiteral("200")).Count);
Assert.Equal(2, sqliteStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200")), s: new RDFResource("ex:subj200"), p: new RDFResource("ex:pred200")).Count);
Assert.Equal(1, sqliteStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200")), s: new RDFResource("ex:subj200"), o: new RDFResource("ex:obj200")).Count);
Assert.Equal(1, sqliteStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200")), s: new RDFResource("ex:subj200"), l: new RDFPlainLiteral("200")).Count);
Assert.Equal(1, sqliteStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200")), s: new RDFResource("ex:subj200"), p: new RDFResource("ex:pred200"), o: new RDFResource("ex:obj200")).Count);
Assert.Equal(1, sqliteStore.SelectQuadruples(c: new RDFContext(new Uri("ex:ctx200")), s: new RDFResource("ex:subj200"), p: new RDFResource("ex:pred200"), l: new RDFPlainLiteral("200")).Count);
Assert.Equal(2, sqliteStore.SelectQuadruples(s: new RDFResource("ex:subj200"), p: new RDFResource("ex:pred200")).Count);
Assert.Equal(1, sqliteStore.SelectQuadruples(s: new RDFResource("ex:subj200"), o: new RDFResource("ex:obj200")).Count);
Assert.Equal(1, sqliteStore.SelectQuadruples(s: new RDFResource("ex:subj200"), l: new RDFPlainLiteral("200")).Count);
Assert.Equal(1, sqliteStore.SelectQuadruples(s: new RDFResource("ex:subj200"), p: new RDFResource("ex:pred200"), o: new RDFResource("ex:obj200")).Count);
Assert.Equal(1, sqliteStore.SelectQuadruples(s: new RDFResource("ex:subj200"), p: new RDFResource("ex:pred200"), l: new RDFPlainLiteral("200")).Count);
Assert.Equal(1, sqliteStore.SelectQuadruples(p: new RDFResource("ex:pred200"), o: new RDFResource("ex:obj200")).Count);
Assert.Equal(1, sqliteStore.SelectQuadruples(p: new RDFResource("ex:pred200"), l: new RDFPlainLiteral("200")).Count);
Assert.Equal(0, sqliteStore.SelectQuadruples(p: new RDFResource("ex:pred200786537"), l: new RDFPlainLiteral("200")).Count); //unexisting

//Optimize
await sqliteStore.OptimizeAsync();

//Query (Full Selectors + Accessors)
Assert.True(sqliteStore.SelectQuadruples().Count > 100);
Assert.Equal(1, sqliteStore[p: new RDFResource("ex:pred200"), l: new RDFPlainLiteral("200")].QuadruplesCount);
Assert.True(sqliteStore[null, null, null, null, null].QuadruplesCount > 100);
await sqliteStore.RemoveQuadruplesAsync();
Assert.Equal(0, sqliteStore.QuadruplesCount);
Assert.Equal(0, await sqliteStore.QuadruplesCountAsync);
Assert.True(sqliteStore.SelectQuadruples().Count == 0);
Assert.True(sqliteStore[null, null, null, null, null].QuadruplesCount == 0);